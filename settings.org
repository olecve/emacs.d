#+title: Emacs Configuration
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :mkdirp yes

* Package Management

#+begin_src emacs-lisp
;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

* Keep .emacs.d Clean

** Save all backups to ~/.emacs.d/backup

Emacs can automatically create backup files. This tells Emacs to
put all backups in ~/.emacs.d/backups. More info:
http://www.gnu.org/software/emacs/manual/html_node/elisp/Backup-Files.html

#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . ,(concat user-emacs-directory "backups"))))
  (setq auto-save-default nil)
#+end_src

* Default Coding System

#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)

; Treat clipboard input as UTF-8 string first; compound text next, etc.
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+end_src

* General Packages
** Tabs

#+begin_src emacs-lisp
  (use-package centaur-tabs
    :demand
    :config
    (centaur-tabs-mode t)
    :bind
    ("C-<prior>" . centaur-tabs-backward)
    ("C-<next>" . centaur-tabs-forward))
#+end_src

** Expand region

#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :bind
    ("C-=" . er/expand-region)
    ("C--" . er/contract-region))
#+end_src

* General Configuration
** User interface

Override defaults

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)    ; Disable visible scrollbar
  (menu-bar-mode -1)      ; Disable the menu bar
  (tool-bar-mode -1)      ; Disable the toolbar
  (tooltip-mode -1)       ; Disable tooltips
  (set-fringe-mode 10)    ; Give some breathing room
  (blink-cursor-mode 0)   ; Disabled blinking cursor

  (setq-default ring-bell-function 'ignore)   ; Disable bell
  (setq-default cursor-type 'bar)             ; Change type of cursor
  (setq-default frame-title-format "%b (%f)") ; Show full path to file in title bar
  (setq-default initial-scratch-message "")   ; Empty the initial *scratch* buffer
  (setq-default indicate-buffer-boundaries 'left)
  
  (defalias 'yes-or-no-p 'y-or-n-p)  ; Save typing chars when answering yes-or-no-p questions

  (global-hl-line-mode)              ; Hightlight current line
  (delete-selection-mode)            ; Replace region when inserting text
#+end_src

Improve scrolling.

#+begin_src emacs-lisp
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ; one line at a time
  (setq mouse-wheel-progressive-speed nil)            ; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't)                  ; scroll window under mouse
  (setq scroll-margin 2)                              ; Add a margin when scrolling vertically
  (setq scroll-step 1)                                ; keyboard scroll one line at a time
  (setq use-dialog-box nil)                           ; Disable dialog boxes since they weren't working in Mac OSX
#+end_src

Enable line numbers and customize their format.

#+begin_src emacs-lisp
  (column-number-mode)

  ;; Enable line numbers for some modes
  (dolist (mode '(text-mode-hook
                  prog-mode-hook
                  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  ;; Override some modes which derive from the above
  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Default font

#+BEGIN_SRC emacs-lisp
  (setq system-specific-font
        (cond
         ((eq system-type 'darwin)
          (progn
            (set-face-attribute 'default nil :family "Menlo" :height 140)
            (set-face-attribute 'italic nil :underline nil)))

         ((eq system-type 'windows-nt)
          (progn
            (set-face-attribute 'default nil :family "Cascadia Code" :height 100)
            (set-face-attribute 'italic nil :underline nil)))

         (t nil)))
#+END_SRC

** Theme

   - Examples of all available base16 themes https://belak.github.io/base16-emacs/
     - Alternate light: base16-atelier-cave-light, base16-atelier-plateau-light, base16-atelier-savanna-light, base16-atelier-lakeside-light
     - Alternate dark: base16-eighties, base16-flat
   - =doom-snazzy=
   - =doom-vibrant=
   - A nice gallery of Emacs themes can be found at https://emacsthemes.com/.

#+begin_src emacs-lisp
  (use-package solarized-theme :defer t)
  (use-package base16-theme :defer t)
  (use-package spacegray-theme :defer t)
  (use-package doom-themes :defer t)

  ; (setq light-theme 'base16-atelier-lakeside-light)
  ; (setq dark-theme 'base16-eighties)

  (setq light-theme 'doom-gruvbox-light)
  (setq dark-theme 'doom-palenight)

  (load-theme dark-theme t)

  (setq current-theme-dark t)
  (defun olecve/toggle-theme ()
    (interactive)
    (if current-theme-dark
        (load-theme light-theme t)
      (load-theme dark-theme t))
    (setq current-theme-dark (not current-theme-dark)))
#+end_src

* Completion System

#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :init
    (ivy-mode 1)
    (setq ivy-height 10
          ivy-count-format "(%d/%d) "   ; change counter formar
          ivy-use-virtual-buffers t
          ivy-use-selectable-prompt t
          ivy-extra-directories ()      ; hide ../ and ./
          ivy-initial-inputs-alist nil) ; remove ^ from initial input of M-x
    :bind
    ("C-s" . 'swiper))

  (use-package counsel
    :after ivy
    :init
    (counsel-mode 1)
    :bind (:map ivy-minibuffer-map))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src

* Org-Mode
** Org Configuration

#+begin_src emacs-lisp
  (defun org-mode-setup ()
    (org-indent-mode))

  (use-package org
    :defer t
    :hook (org-mode . org-mode-setup))
#+end_src
   
** Bullets

#+begin_src emacs-lisp
  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-remove-leading-stars nil)
    (org-superstar-leading-bullet ?\s)
    (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Center org buffers

#+begin_src emacs-lisp
  (defun olecve/org-mode-visual-fill ()
    (setq visual-fill-column-width 120
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . olecve/org-mode-visual-fill))
#+end_src

** Block Templates

#+begin_src emacs-lisp
;; This is needed as of Org 9.2
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src sh"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
(add-to-list 'org-structure-template-alist '("json" . "src json"))
#+end_src

** More TODO states

#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "|" "DONE(d)")
        (sequence "NEXT(n)" "IN-PROGRESS(i)" "REVIEW(r)" "HOLD(h)" "|" "CANCELLED(c)")))

(setq org-todo-keyword-faces
      '(("CANCELLED" :foreground "#00adad")
        ("HOLD" :foreground "#007070")
        ("NEXT" :foreground "magenta" :weight boldd)
        ("REVIEW" :foreground "green" :weight bold)
        ("IN-PROGRESS" :foreground "forest green" :weight bold)))
#+end_src

** Improve log

#+begin_src emacs-lisp
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
#+end_src

** org-agenda

#+begin_src emacs-lisp
(global-set-key (kbd "C-c a") 'org-agenda)

(setq org-agenda-files
    (cond ((eq system-type 'darwin)
           (append (directory-files-recursively "~/OneDrive/org/todo" ".org$")
                   (directory-files-recursively "~/OneDrive/org/work/projects" ".org$")))
          ((eq system-type 'windows-nt)
           (append (directory-files-recursively "~/../../OneDrive/org/todo" ".org$")
                   (directory-files-recursively "~/../../OneDrive/org/work/projects" ".org$")))))

(setq calendar-week-start-day 1)
(setq org-agenda-window-setup 'only-window)

(setq org-agenda-custom-commands
      '(("d" "Personal schedule"
         ((tags "PRIORITY=\"A\""
                ((org-agenda-overriding-header "High-priority unfinished tasks")
                 (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("TODO" "DONE" "NEXT" "CANCELLED")))))
          (agenda "")
          (todo "NEXT"
                ((org-agenda-overriding-header "Next tasks")))))))
#+end_src

* Development
** Git
*** Magit

#+begin_src emacs-lisp
(use-package magit
  :commands magit-status
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

** Treemacs

#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))
#+end_src

** Productivity
*** Rainbow Delimiters

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Languages
*** Projectile

#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :demand t
    :bind ("C-M-p" . projectile-find-file)
    :bind-keymap ("C-c p" . projectile-command-map))

  (use-package counsel-projectile
    :disabled
    :after projectile
    :config
    (counsel-projectile-mode))
#+end_src

*** Language Server Support

#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode)
    :config
    (lsp-enable-which-key-integration t))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

  (use-package lsp-treemacs
    :after lsp)
#+end_src

*** Clojure

#+begin_src emacs-lisp
  (use-package clojure-mode
    :mode "\\.clj\\'"
    :init
    (add-hook 'clojure-mode-hook #'lsp)
    (add-hook 'clojurec-mode-hook #'lsp)
    (add-hook 'clojurescript-mode-hook #'lsp))

  (use-package cider
    :ensure t)

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind
    (:map company-active-map
          ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+end_src

* Other

#+begin_src emacs-lisp
(setq recentf-save-file (concat user-emacs-directory ".recentf"))
(setq recentf-max-menu-items 25)
(recentf-mode 1)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)

(setq history-length 25)
(savehist-mode 1)

;; Remember and restore the last cursor location of opened files
(save-place-mode 1)

;; Don't pop up UI dialogs when promting
(setq use-dialog-box nil)

;; Revert the buffer when the underlying file has changed
(global-auto-revert-mode 1)

;; Revert Dired and other buffers
(setq global-auto-revert-non-file-buffers t)

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
#+end_src

* Functions

#+begin_src emacs-lisp
(defun olecve/move-line-up ()
  "Move up the current line."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))

(defun olecve/move-line-down ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))

(defun olecve/split-window-below-and-switch ()
  (interactive)
  (split-window-below)
  (other-window 1))

(defun olecve/split-window-right-and-switch ()
  (interactive)
  (split-window-right)
  (other-window 1))

(defun olecve/duplicate-line()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank))
#+end_src

* Key Bindings
** which-key

#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.5))
#+end_src

** Key Bindings Customisations

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>")       'keyboard-escape-quit)          ; ESC cancels all

  (global-set-key [f12]                  'menu-bar-mode)                 ; F12 shows menu bar

  (global-set-key (kbd "M--")            'text-scale-decrease)
  (global-set-key (kbd "M-=")            'text-scale-increase)

  (global-set-key (kbd "S-<down>")       'windmove-down)
  (global-set-key (kbd "S-<left>")       'windmove-left)
  (global-set-key (kbd "S-<right>")      'windmove-right)
  (global-set-key (kbd "S-<up>")         'windmove-up)
  (global-set-key (kbd "C-x 2")          'olecve/split-window-below-and-switch)
  (global-set-key (kbd "C-x 3")          'olecve/split-window-right-and-switch)

  (global-set-key [(control shift up)]   'olecve/move-line-up)
  (global-set-key [(control shift down)] 'olecve/move-line-down)
  (global-set-key (kbd "C-c C-d")        'olecve/duplicate-line)

  (global-set-key [f7]                   'olecve/toggle-theme)
#+end_src
