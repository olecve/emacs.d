* Packages
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
       '("melpa" . "http://melpa.org/packages/") t)

(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents))

(defvar my-packages
  '(restclient
    expand-region
    volatile-highlights
    undo-tree
    sr-speedbar
    saveplace
    recentf
    json-mode
    magit
    markdown-mode
    ; projects
    projectile
    project-explorer
    ; org-mode extentions
    org-bullets
    ; counsel depends on ivy and swiper as dependencies
    counsel
    ivy
    swiper
    ; clojure
    cider
    company
    rainbow-delimiters
    highlight-symbol
    paredit
    clojure-mode
    clojure-mode-extra-font-locking
    ; text/code navigation help
    highlight-symbol
    ; file browser
    ranger
    treemacs
    ; themes
    solarized-theme
    ; others
    which-key
    adaptive-wrap
    whitespace))

(dolist (p my-packages)
  (when (not (package-installed-p p))
    (package-install p)))
#+END_SRC

* Bootstrap

Override defaults

#+BEGIN_SRC emacs-lisp
(blink-cursor-mode 0)   ; Disabled blinking cursor
(menu-bar-mode -1)      ; Disable the menu bar
(scroll-bar-mode -1)    ; Disable the scroll bar
(tool-bar-mode -1)      ; Disable tool bar

(setq-default
 cursor-type 'bar                  ; Change type of cursor
 frame-title-format "%b (%f)"      ; Show full path to file in title bar
 inhibit-startup-message t         ; Disable start-up screen
 initial-scratch-message ""        ; Empty the initial *scratch* buffer
 ring-bell-function 'ignore        ; Disable bell
 scroll-step 1                     ;
 scroll-margin 2                   ; Add a margin when scrolling vertically
 scroll-conservatively 10000       ;
 mouse-wheel-progressive-speed nil ; Don't accelerate scrolling
 mouse-wheel-follow-mouse 't       ; Scroll window under mouse
 show-trailing-whitespace nil      ; Display trailing whitespaces, configured later for modes
 tab-width 2)                      ; Set width for tabs
(global-hl-line-mode)              ; Hightlight current line
(delete-selection-mode)            ; Replace region when inserting text
(global-subword-mode)              ; Iterate through CamelCase words

(defalias 'yes-or-no-p 'y-or-n-p)  ; Save typing chars when answering yes-or-no-p questions
#+END_SRC

Garbage-collect on focus-out, Emacs /should/ feel snappier.

#+BEGIN_SRC emacs-lisp
(add-hook 'focus-out-hook #'garbage-collect)
#+END_SRC

** Load =.custom.el=

Don't save custom configs from setting.org to init.el

#+BEGIN_SRC emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC

* Navigation
** =ivy=

#+BEGIN_SRC emacs-lisp
(require 'ivy)

(setq ivy-use-virtual-buffers t)
(setq ivy-count-format "(%d/%d) ")
(setq ivy-extra-directories nil) ; hide ../ and ./

(global-set-key (kbd "C-s") 'swiper)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)

(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)

(global-set-key (kbd "C-c C-r") 'ivy-resume)
#+END_SRC

** Shows a list of buffers
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

** Save place

http://www.emacswiki.org/emacs/SavePlace
http://ergoemacs.org/emacs/emacs_save_cursor_position.html

#+BEGIN_SRC emacs-lisp
(if (version< emacs-version "25.0")
    (progn
      (require 'saveplace)
      (setq-default save-place t))
  (save-place-mode 1))
#+END_SRC

** Use =recentf= to open recently edited filed with =C-x C-r=

#+BEGIN_SRC emacs-lisp
(setq recentf-save-file (concat user-emacs-directory ".recentf"))
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 40)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)
#+END_SRC

** =swiper= great tool for search in the file

#+BEGIN_SRC emacs-lisp
(require 'swiper)
(setq ivy-use-virtual-buffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key "\C-r" 'swiper)
#+END_SRC

* UI
** See matching pairs of parentheses and other characters

#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
#+END_SRC

** Save all backups to ~/.emacs.d/backup

Emacs can automatically create backup files. This tells Emacs to
put all backups in ~/.emacs.d/backups. More info:
http://www.gnu.org/software/emacs/manual/html_node/elisp/Backup-Files.html

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . ,(concat user-emacs-directory "backups"))))
(setq auto-save-default nil)
#+END_SRC

** Show line numbers

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(add-hook 'text-mode-hook 'display-line-numbers-mode)
#+END_SRC

** whitespaces

#+BEGIN_SRC emacs-lisp
(require 'whitespace)

(setq-default whitespace-style '(face empty tab trailing))

(add-hook 'prog-mode-hook #'whitespace-turn-on)
(add-hook 'text-mode-hook #'whitespace-turn-on)
#+END_SRC

* Editing
** Enable auto pairing of brackets and quotation marks

#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
#+END_SRC

* Coding customizations
** JavaScript

#+BEGIN_SRC emacs-lisp
(add-hook 'json-mode-hook
          (lambda ()
            (make-local-variable 'js-indent-level)
            (setq js-indent-level 2)))
#+END_SRC

** Clojure

#+BEGIN_SRC emacs-lisp
;; Enter cider mode when entering the clojure major mode
(add-hook 'clojure-mode-hook 'cider-mode)

;; Turn on auto-completion with Company-Mode
(global-company-mode)
(add-hook 'cider-repl-mode-hook #'company-mode)
(add-hook 'cider-mode-hook #'company-mode)

;; Replace return key with newline-and-indent when in cider mode.
(add-hook 'cider-mode-hook '(lambda () (local-set-key (kbd "RET") 'newline-and-indent)))

(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

* Theme
** Default font

#+BEGIN_SRC emacs-lisp
(setq system-specific-font
	(cond
    ((eq system-type 'windows-nt)
		  (progn
			  (set-face-attribute 'default nil :family "Consolas" :height 100)
				(set-face-attribute 'italic nil :underline nil)))
			(t nil)))
#+END_SRC

** Adjust solarized theme

#+BEGIN_SRC emacs-lisp
(setq solarized-use-variable-pitch nil)
(setq solarized-scale-org-headlines nil)
(setq solarized-height-plus-1 1.0)
(setq solarized-height-plus-2 1.0)
(setq solarized-height-plus-3 1.0)
(setq solarized-height-plus-4 1.0)
(load-theme 'solarized-light t)

(setq current-theme-dark nil)
(defun toggle-theme ()
  (interactive)
  (if current-theme-dark
      (load-theme 'solarized-light t)
      (load-theme 'solarized-dark t))
  (setq current-theme-dark (not current-theme-dark)))
#+END_SRC

* Modes
** Minor modes
*** flyspell (disabled as aspell not available on win)

Check http://aspell.net/win32/ for dictionaries.
Try to use this as alternative https://lists.gnu.org/archive/html/help-gnu-emacs/2014-04/msg00030.html

#+BEGIN_SRC emacs-lisp
;(custom-set-variables
; '(ispell-program-name "c:\\Program Files (x86)\\Aspell\\bin\\aspell.exe"))
;
; Enable Flyspell for text modes
;(add-hook 'text-mode-hook 'flyspell-mode)
#+END_SRC

*** projectile

#+BEGIN_SRC emacs-lisp
(require 'projectile)
(projectile-global-mode)
(setq projectile-use-native-indexing t)
(setq projectile-globally-ignored-directories
  (append projectile-globally-ignored-directories '(".git" ".hg" "target" ".sass-cache" "node_modules" ".idea")))
#+END_SRC

*** undo-tree

#+BEGIN_SRC emacs-lisp
(require 'undo-tree)
(global-undo-tree-mode)
#+END_SRC

*** volatile-highlights

#+BEGIN_SRC emacs-lisp
(require 'volatile-highlights)
(volatile-highlights-mode t)
#+END_SRC

*** sr-speedbar

#+BEGIN_SRC emacs-lisp
(require 'sr-speedbar)
(setq speedbar-show-unknown-files t)
#+END_SRC

** Major modes
*** org
**** Improve visual for bullets

#+BEGIN_SRC emacs-lisp
(setq org-ellipsis "…")
(setq org-bullets-bullet-list '("•"))
(add-hook 'org-mode-hook (lambda () (org-bullets-mode t)))
#+END_SRC

**** Improve work with source files

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
(setq org-src-window-setup 'current-window)
#+END_SRC

**** Remove markup characters

#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC

**** Clojure code blocks

#+BEGIN_SRC emacs-lisp
(org-defkey org-mode-map "\C-x\C-e" 'cider-eval-last-sexp)
(org-defkey org-mode-map "\C-c\C-d" 'cider-doc)

; No timeout when executing calls on Cider via nrepl
(setq org-babel-clojure-sync-nrepl-timeout nil)

; Let's have pretty source code blocks
(setq org-edit-src-content-indentation 0
      org-src-tab-acts-natively t
      org-src-fontify-natively t
      org-confirm-babel-evaluate nil)
#+END_SRC

*** eshell

#+BEGIN_SRC emacs-lisp
(setq eshell-scroll-to-bottom-on-input t)
(add-hook 'eshell-mode-hook
          (lambda ()
              (set (make-local-variable 'scroll-margin) 0)))
#+END_SRC

* Functions

#+BEGIN_SRC emacs-lisp
(require 'cl)
(defun olecve/pretty-print-xml-region (begin end)
  (interactive "r")
  (save-excursion
    (nxml-mode)
    ;; split <foo><bar> or </foo><bar>, but not <foo></foo>
    (goto-char begin)
    (while (search-forward-regexp ">[ \t]*<[^/]" end t)
      (backward-char 2) (insert "\n") (incf end))
    ;; split <foo/></foo> and </foo></foo>
    (goto-char begin)
    (while (search-forward-regexp "<.*?/.*?>[ \t]*<" end t)
      (backward-char) (insert "\n") (incf end))
    ;; put xml namespace decls on newline
    (goto-char begin)
    (while (search-forward-regexp "\\(<\\([a-zA-Z][-:A-Za-z0-9]*\\)\\|['\"]\\) \\(xmlns[=:]\\)" end t)
      (goto-char (match-end 0))
      (backward-char 6) (insert "\n") (incf end))
    (indent-region begin end nil))
  (message "All indented!"))

(defun olecve/xml-pretty-print-buffer ()
  "pretty print the XML in a buffer."
  (interactive)
  (olecve/pretty-print-xml-region (point-min) (point-max)))

(defun move-line-up ()
  "Move up the current line."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))

(defun move-line-down ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))

(defun split-window-below-and-switch ()
  (interactive)
  (split-window-below)
  (other-window 1))

(defun split-window-right-and-switch ()
  (interactive)
  (split-window-right)
  (other-window 1))
#+END_SRC

** misc

some non-standard editing and utility commands for Emacs

#+BEGIN_SRC emacs-lisp
(require 'misc)
#+END_SRC

* Key bindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C--")            'text-scale-decrease)
(global-set-key (kbd "C-=")            'text-scale-increase)
(global-set-key (kbd "S-<down>")       'windmove-down)
(global-set-key (kbd "S-<left>")       'windmove-left)
(global-set-key (kbd "S-<right>")      'windmove-right)
(global-set-key (kbd "S-<up>")         'windmove-up)
(global-set-key [(control shift up)]   'move-line-up)
(global-set-key [(control shift down)] 'move-line-down)
(global-set-key (kbd "C-x 2")          'split-window-below-and-switch)
(global-set-key (kbd "C-x 3")          'split-window-right-and-switch)
(global-set-key (kbd "C-c m")          'magit-status)
(global-set-key (kbd "M-=")            'er/expand-region)
(global-set-key (kbd "M--")            'er/contract-region)
(global-set-key (kbd "TAB")            'company-indent-or-complete-common)
(global-set-key [f12]                  'menu-bar-mode)
(global-set-key [f7]                   'toggle-theme)
(global-set-key [f9]                   'cider-jack-in)
(global-set-key [(control f3)]         'highlight-symbol)
(global-set-key [f3]                   'highlight-symbol-next)
(global-set-key [(shift f3)]           'highlight-symbol-prev)
(global-set-key [(meta f3)]            'highlight-symbol-query-replace)
(global-set-key (kbd "M-0")            'treemacs-select-window)
(global-set-key (kbd "C-x t 1")        'treemacs-delete-other-windows)
(global-set-key (kbd "C-x t t")        'treemacs)
(global-set-key (kbd "C-x t B")        'treemacs-bookmark)
(global-set-key (kbd "C-x t C-t")      'treemacs-find-file)
(global-set-key (kbd "C-x t M-t")      'treemacs-find-tag)
(define-key org-mode-map "\M-q"        'visual-line-mode)
#+END_SRC
